Metadata-Version: 2.1
Name: numerical-analysis-aman
Version: 0.0.4
Summary: This Module is Numerical analysis, area of mathematics and computer science that creates, analyzes, and implements algorithms for obtaining numerical solutions to problems involving continuous variables. Such problems arise throughout the natural sciences, social sciences, engineering, medicine, and business. This module contain some basic Functions so that it makes easyer to reuse them
Home-page: https://github.com/AMANKANOJIYA/Numerical_Analysis
Author: Aman Kanojiya
Author-email: aman.kanojiya4203@gmail.com
License: MIT
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Description-Content-Type: text/markdown

# Numerical Analysis

This Module is Numerical analysis, area of mathematics and computer science that creates, analyzes, and implements algorithms for obtaining numerical solutions to problems involving continuous variables. Such problems arise throughout the natural sciences, social sciences, engineering, medicine, and business.

## How to Install

Pip install this module from your console<br/>
Import this to module your Work Space<br/>
`import Numerical_Analysis_Aman`<br/>
And you are good to go

## Explore (How It Works)

This at present contain 4 parts You can explore then from Below and have some
idea about all methods anf Functions

### Numerical Integration

This part contain interpolation Method at present having only one method but in near future you can also explore new ones
`na=Numerical_Analysis_Aman.Numerical_Interpolation()`

- `na.Trapazoid(itration=2)` [Trapazoid Method]("https://en.wikipedia.org/wiki/Trapezoidal_rule#:~:text=The%20trapezoidal%20rule%20is%20one,similar%20to%20the%20trapezoid%20rule.")
- `na.Simpson_13(itration=2)` [Simpson 1/3]("https://en.wikipedia.org/wiki/Simpson%27s_rule")
- `na.Simpson_38(itration=2)` [Simpson 3/8]("https://en.wikipedia.org/wiki/Simpson%27s_rule")

### Numerical Analysis

This part contain Integration Method at present having only Three Basic method <br/>
`na = Numerical_Analysis_Aman.Numerical_Analysis(x_0, y_0, x_given)`

- `na.Eular( itration = 2 )` [Eular]("https://en.wikipedia.org/wiki/Euler_method")
- `na.EularModified( itration = 2 )` [EularModified]("https://en.wikipedia.org/wiki/Euler_method")
- `na.RungaKutta( itration = 2 )` [RungaKutta]("https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods")

### Numerical Interpolation

This part contain Analysis Method at present having only Three Basic method <br/>
`na=Numerical_Analysis_Aman.Numerical_Integration()`

- `na.Langrangian()` [Langrangian]("https://en.wikipedia.org/wiki/Lagrange_polynomial")
- `na.Newton_Divided()` [Newton Divided Differences]("https://en.wikipedia.org/wiki/Divided_differences")

### Numerical Algebra

This part contain Analysis Method at present having only Three Basic method <br/>
`na=Numerical_Analysis_Aman.Numerical_Algebra(Exp-1,Exp-2,Exp-3)`

- `na.Jacobi(itration=6)` [Jacobi]("https://en.wikipedia.org/wiki/Jacobi_method")
- `na.Gauss_Seidel(itration=6)` [Gauss Seidel]("https://en.wikipedia.org/wiki/Gauss%E2%80%93Seidel_method")
- `na.Gauss_Seidel_4(list_4,itration=6)` [Gauss Seidel for 4 variable]("https://en.wikipedia.org/wiki/Gauss%E2%80%93Seidel_method")

## Contact

If any Issue Contact Me through Email `aman.kanojiya4203@gmail.com`

## license

This repository is licensed under the MIT license.
See LICENSE for details.


